- block:
  - name: 添加 kubectl kubeadm 命令自动补全
    lineinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      state: present
      regexp: "{{ item }} completion"
      line: "source <({{ item }} completion bash)"
    with_items:
      - kubectl
      - kubeadm

  - name: 当前会话加载 kubectl kubeadm 命令，并自动补全
    shell: >
      {{ item }} completion bash > /etc/bash_completion.d/{{ item }};
      source {{ ansible_env.HOME }}/.bash_profile
    args:
      executable: /bin/bash
    with_items:
      - kubectl
      - kubeadm

  - name: 所有 kube_cluster 节点创建所需目录
    file:
      name: "{{ item }}"
      state: directory
    with_items:
    - "{{ ansible_env.HOME }}/.kube/"
    - "{{ kubernetes_etc_dir }}"
    - "{{ manifest_dir }}"
    - "{{ cni_etc_dir }}"
    - "{{ systemd_service_dir }}/kubelet.service.d"
    - "{{ kubelet_data_dir }}"
    - "{{ kube_proxy_data_dir }}"
    - "{{ kubernetes_log_dir }}/kubelet"
    - "{{ kubernetes_log_dir }}/kube-proxy"

  - name: 安装集群 lb 服务
    include_tasks: lb/main.yml

  - name: kubeadm 方式搭建 kubernetes 集群
    include_tasks: kubeadm/main.yml

  - include_tasks: rbac/rbac.yml

  # Error from server: Get "https://10.0.1.4:10250/containerLogs/kube-system/kube-apiserver-10.0.1.4/kube-apiserver?follow=true": remote error: tls: internal error
  - name: 手动 approve csr
    shell: >
      [ `kubectl get csr | grep 'Pending' | wc -l` -ne 0 ] && \
      kubectl get csr | grep 'Pending' | awk '{print $1}'| xargs kubectl certificate approve || exit 0
    environment:
        KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
    args:
      executable: /bin/bash
    run_once: "{{ enable_run_once | default(true) }}"
    delegate_to: "{{ groups['masters'][0] }}"

  - name: 获取 kubeconfig admin 文件
    when: inventory_hostname in groups['kube_masters']
    slurp:
      src: "{{ item }}"
    with_items:
      - "{{ kubernetes_etc_dir }}/admin.conf"
    register: slurp_kubeconfig
    run_once: "{{ enable_run_once | default(true) }}"
    delegate_to: "{{ groups['masters'][0] }}"

  - name: 配置 kubeconfig admin 文件到 $HOME/.kube/config
    when: inventory_hostname in groups['kube_masters']
    copy:
      dest: "{{ ansible_env.HOME }}/.kube/config"
      content: "{{ item.content | b64decode }}"
      owner: root
      group: root
      mode: 0600
    no_log: true
    with_items: "{{ slurp_kubeconfig.results }}"

  - name: 禁止 master 节点被调度，设置节点标签
    when: inventory_hostname in groups['kube_masters']
    shell: >
      kubectl cordon {{ inventory_hostname }};
      kubectl taint node {{ inventory_hostname }} node-role.kubernetes.io/master=true:NoSchedule --overwrite;
      kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/master='' --overwrite;
      kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/ingress='' --overwrite
    until: set_taint_master.rc == 0
    retries: 3
    delay: "{{ retry_stagger }}"
    register: set_taint_master

  - name: 允许 worker 节点被调度，设置节点标签
    when: inventory_hostname in groups['kube_nodes']
    shell: >
      [ `kubectl get nodes {{ inventory_hostname }} --show-labels | grep cloudprovider` ] && \
      kubectl taint node {{ inventory_hostname }} node.cloudprovider.kubernetes.io/uninitialized-;
      kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/worker='' --overwrite
    register: set_taint_worker
    until: set_taint_worker.rc == 0
    retries: 3
    delay: "{{ retry_stagger }}"

  - block:
    - name: 创建 endpoint 配置清单目录
      file: name={{ item }} state=directory
      with_items: "{{ kubernetes_etc_dir }}/endpoint"

    - name: 配置核心组件的 endpoint 清单文件，以便用于prometheus监控
      template: src="endpoint/{{ item }}.j2" dest="{{ kubernetes_etc_dir }}/endpoint/{{ item }}"
      with_items:
        - control-plane-ep.yml
        - data-plane-ep.yml

    - name: 创建核心组件的 endpoint
      shell: >
        kubectl apply -f {{ kubernetes_etc_dir }}/endpoint/
      environment:
        KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
      register: apply_endpoint
      until: apply_endpoint.rc == 0
      retries: 3
      delay: "{{ retry_stagger }}"
    run_once: "{{ enable_run_once | default(true) }}"
    delegate_to: "{{ groups['masters'][0] }}"

  - name: 普通用户配置集群访问权限
    include_tasks: common/normal-user-admission.yml
