- block:
  - name: debug
    debug:
      msg: "安装 kubernetes, 可能需要一定时间。。"
    run_once: true

  - name: 离线安装 kubernetes
    command: >-
      rpm -Uvh --nodeps --force *.rpm
    args:
      warn: false
      chdir: "{{ cache_dir }}/kubernetes"
    register: kubernetes_rpm_install
    failed_when: kubernetes_rpm_install.rc != 0 and "is already installed" not in kubernetes_rpm_install.stderr
    changed_when: kubernetes_rpm_install.rc == 0
  when: setup_way != 'binary'

- name: 二进制安装 kubernetes
  when: setup_way == 'binary'
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - { src: "{{ cache_dir }}/binary/kubernetes/", dest: "/usr/bin/"}

- name: 安装证书更新脚本(要求 kubernetes 版本>1.17)
  copy:
    src: "{{ inventory_dir }}/roles/certificates/files/update-kubeadm-cert.sh"
    dest: "/usr/local/bin/"
    owner: root
    group: root
    mode: 0755

- name: 安装 helm
  when: inventory_hostname in groups['kube_masters']
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - { src: "{{ cache_dir }}/binary/helm/", dest: "/usr/bin/"}

- block:
  - name: 生成 bootstrap token
    when:
      - add_etcds_task is undefined
      - add_masters_task is undefined
    include_tasks: "{{ inventory_dir }}/roles/certificates/tasks/kube-config/gen_bootstrap_token.yml"

  - name: 获取 bootstrap_token
    shell: >
      cat "{{ kubernetes_etc_dir }}/token.csv" | grep kubelet-bootstrap | cut -d',' -f1
    register: get_bootstrap_token

  - name: 设置 bootstrap_token 变量
    set_fact:
      bootstrap_token: "{{ get_bootstrap_token.stdout }}"
  run_once: true
  delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"

- block:
  - name: 配置集群高可用
    when: add_nodes_task is undefined
    include_tasks: lb/main.yml

  - name: 初始化化 kubernetes 集群所有节点
    include_tasks:  common/init_all.yml

  - name: 初始化化 kubernetes 集群 master 节点
    when: add_nodes_task is undefined
    include_tasks:  common/init_master.yml

  - name: 初始化化 kubernetes 集群 worker 节点
    include_tasks:  common/init_worker.yml

  - name: kubeadm 方式启动 kubernetes 集群各组件
    when: startup_way == 'kubeadm'
    include_tasks: kubeadm/main.yml

  - name: systemctl 方式启动 kubernetes 集群各组件
    when: startup_way != 'kubeadm'
    include_tasks: binary/main.yml

  - block:
    - block:
      - name: 配置 rbac 文件
        copy:
          src: "rbac"
          dest: "{{ kubernetes_etc_dir }}"
          mode: 0644

      - name: 创建 RBAC 资源
        shell: >
          kubectl apply -f "{{ kubernetes_etc_dir }}/rbac"
        environment:
          KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
      delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"
      run_once: true

    - include_tasks: kube-proxy/main.yml
    - include_tasks: coredns/main.yml
    when:
      - add_masters_task is undefined
      - add_nodes_task is undefined

  - name: 添加 kubectl kubeadm 命令自动补全
    lineinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      state: present
      regexp: "{{ item }} completion"
      line: "source <({{ item }} completion bash)"
    with_items:
      - kubectl
      - kubeadm

  - name: kubectl kubeadm 自动补全写入 /etc/bash_completion.d/
    shell: >
      {{ item }} completion bash > /etc/bash_completion.d/{{ item }};
      source {{ ansible_env.HOME }}/.bash_profile
    args:
      executable: /bin/bash
    with_items:
      - kubectl
      - kubeadm

  - block:
    - name: 添加 helm 命令自动补全
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.bashrc"
        state: present
        regexp: "{{ item }} completion"
        line: "source <({{ item }} completion bash)"
      with_items:
        - helm

    - name: helm 自动补全写入 /etc/bash_completion.d/
      shell: >
        {{ item }} completion bash > /etc/bash_completion.d/{{ item }};
        source {{ ansible_env.HOME }}/.bash_profile
      args:
        executable: /bin/bash
      with_items:
        - helm
    when: inventory_hostname in groups['kube_masters']

  # Error from server: Get "https://10.0.1.4:10250/containerLogs/kube-system/kube-apiserver-10.0.1.4/kube-apiserver?follow=true": remote error: tls: internal error
  - name: 手动 approve csr
    shell: >
      [ `kubectl get csr | grep 'Pending' | wc -l` -ne 0 ] && \
      kubectl get csr | grep Pending | awk '{print $1}' | xargs -L 1 kubectl certificate approve|| exit 0
    environment:
        KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
    args:
      executable: /bin/bash
    run_once: "{{ enable_run_once | default(true) }}"
    delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"

  - name: 获取 kubeconfig admin 文件
    when: inventory_hostname in groups['kube_masters']
    slurp:
      src: "{{ item }}"
    with_items:
      - "{{ kubernetes_etc_dir }}/admin.conf"
    register: slurp_kubeconfig
    run_once: "{{ enable_run_once | default(true) }}"
    delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"

  - name: 配置 kubeconfig admin 文件到 $HOME/.kube/config
    when: inventory_hostname in groups['kube_masters']
    copy:
      dest: "{{ ansible_env.HOME }}/.kube/config"
      content: "{{ item.content | b64decode }}"
      owner: root
      group: root
      mode: 0600
    no_log: true
    with_items: "{{ slurp_kubeconfig.results }}"

  - name: master 设置节点标签，并设置污点（禁止调度）
    when: inventory_hostname in groups['kube_masters']
    shell: >
      {% if groups['kube_masters'] | length > 1 -%}
        kubectl taint node {{ inventory_hostname }} node-role.kubernetes.io/master=true:NoSchedule --overwrite;
      {%- endif -%}
      kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/master='' --overwrite;
      kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/control-plane='' --overwrite;
      kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/ingress='' --overwrite
    until: set_taint_master.rc == 0
    retries: 3
    delay: "{{ retry_stagger }}"
    register: set_taint_master

  - name: 允许 worker 节点被调度，设置节点标签
    when: inventory_hostname in groups['kube_nodes']
    shell: >
      [ `kubectl get nodes {{ inventory_hostname }} --show-labels | grep cloudprovider` ] && \
      kubectl taint node {{ inventory_hostname }} node.cloudprovider.kubernetes.io/uninitialized-;
      kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/worker='' --overwrite
    register: set_taint_worker
    until: set_taint_worker.rc == 0
    retries: 3
    delay: "{{ retry_stagger }}"
    delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"

  - block:
    - name: 创建 endpoint 配置清单目录
      when: inventory_hostname in groups['kube_masters']
      file:
        name: "{{ item }}"
        state: directory
        mode: 0664
      with_items: "{{ kubernetes_etc_dir }}/endpoint"

    - name: 配置核心组件的 endpoint 清单文件，以便用于prometheus监控
      when: inventory_hostname in groups['kube_masters']
      template:
        src: "endpoint/{{ item }}.j2"
        dest: "{{ kubernetes_etc_dir }}/endpoint/{{ item }}"
        mode: 0664
      with_items:
        - control-plane-ep.yml
        - data-plane-ep.yml

    - name: 创建核心组件的 endpoint
      shell: >
        kubectl apply -f {{ kubernetes_etc_dir }}/endpoint/
      environment:
        KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
      register: apply_endpoint
      until: apply_endpoint.rc == 0
      retries: 3
      delay: "{{ retry_stagger }}"
      run_once: "{{ enable_run_once | default(true) }}"
      delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"
    when:
      - add_masters_task is undefined
      - add_nodes_task is undefined

  - name: 普通用户配置集群访问权限
    include_tasks: common/normal-user-admission.yml
