- block:
  - name: 获取第一个 master 节点各组件状态
    when: inventory_hostname == groups['kube_masters'] | difference(groups['delete_masters']) | unique | first
    shell: >
      cs_running_num=0;
      for cs in {kube-apiserver,kube-controller-manager,kube-scheduler};
      do
        {% if container_runtime == 'docker' -%}
        [ `docker ps --filter name=k8s_${cs}.* --filter status=running | wc -l` -eq 2 ] && cs_running_num=`expr $cs_running_num + 1`;
        {% elif container_runtime == 'containerd' -%}
        [ `crictl ps --name=${cs}.* --state running | wc -l` -eq 2 ] && cs_running_num=`expr $cs_running_num + 1`;
        {%- endif -%}
      done;
      echo $cs_running_num
    register: cs_status_result

  - block:
    # kubeadm init --pod-network-cidr="172.30.0.0/16" --kubernetes-version=v1.18.6 --image-repository=registry.aliyuncs.com/k8sxio --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --dry-run
    - debug: msg="初始化第一个 master 节点，可能需要一定时间。。"
    - name: 初始化第一个 master 节点
      shell: >
        timeout -k 240s 240s;
        systemctl stop kubelet.service;
        rm -f {{ kubelet_data_dir }}/cpu_manager_state;
        rm -f {{ kubelet_data_dir }}/memory_manager_state;
        rm -f {{ manifest_dir }}/kube-*;
        kubeadm init \
          {% if skip_kube_proxy | bool -%}
          --skip-phases=addon/kube-proxy \
          {% endif -%}
          {% if skip_coredns | bool -%}
          --skip-phases=addon/coredns \
          {% endif -%}
          --ignore-preflight-errors=ImagePull \
          --config={{ kubernetes_etc_dir }}/kubeadm-config.yaml --upload-certs --v=5
      register: init_rslt
      # until: init_rslt.rc == 0
      # retries: 3
      delay: "{{ retry_stagger | random + 2 }}"

    - name: 校验初始化第一个 master 节点是否成功
      assert:
        that: init_rslt is succeeded
        msg: "节点：{{ inventory_hostname }} kubeadm int 失败"

    - include_tasks: common/check_master_status.yml

    - name: 确认 kube-vip 启动完成, 虚拟 IP 创建成功
      when: lb_mode == "kube-vip"
      # kubectl get po -n kube-system | grep kube-vip | cut -d' ' -f1 | xargs kubectl delete po -n kube-system;
      # systemctl restart kubelet;
      shell: >
        nc -z -w 3 {{ lb_apiserver_ip | trim }} {{ lb_secure_port }};
      # environment:
      #   KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
      register: lb_status
      until: lb_status.rc == 0
      retries: 8
      delay: 15
    when: 'cs_status_result.stdout is defined and cs_status_result.stdout != "3"'
    run_once: true
    delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"

  - name: 获取其他 master 节点各组件状态
    shell: >
      kubectl get nodes | grep {{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }} | wc -l || exit 0
    environment:
      KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
    register: get_nodes_result
    delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"

  # # 由于 etcd 是二进制安装，因此需要加上配置： --config kubeadm-config.yaml
  - name: 生成 master 节点 join token
    when: install_way == 'command'
    shell: >
      echo $(kubeadm token create --print-join-command --ttl=15m) --certificate-key $(kubeadm init phase upload-certs --upload-certs --config {{ kubernetes_etc_dir }}/kubeadm-config.yaml | sed -n '3p')
    environment:
      KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
    run_once: true
    delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_masters']) | unique | first }}"
    register: master_kubeadm_join_cmd

  - name: 生成 kubeadm join 命令
    when: install_way == 'command'
    set_fact:
      kubeadm_join: "{{ master_kubeadm_join_cmd.stdout }}"

  - block:
    # - debug: msg="其他 master 节点加入集群，可能需要一定时间。。"
    - name: 其他 master 节点加入集群
      when: install_way != 'command'
      shell: >
        timeout -k 240s 240s;
        systemctl stop kubelet.service;
        rm -f {{ kubelet_data_dir }}/cpu_manager_state;
        rm -f {{ kubelet_data_dir }}/memory_manager_state;
        rm -f {{ manifest_dir }}/kube-*;
        kubeadm join --config {{ kubernetes_etc_dir }}/kubeadm-config.yaml \
          --ignore-preflight-errors=all \
          --v=5
      register: master_join_rslt
      ignore_errors: true

    - debug: var=kubeadm_join
      when: install_way == 'command'
    # master使用kubeadm升级1.18之后 遇到新的node不能添加问题,https://github.com/kubernetes/website/pull/19868/files
    # kubeadm init phase bootstrap-token
    - name: 其他 master 节点加入集群
      when: install_way == 'command'
      shell: >
        timeout -k 240s 240s;
        {{ kubeadm_join }} --control-plane \
          --node-name={{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }} \
          --ignore-preflight-errors=all \
          --v=5
      register: master_join_rslt

    - name: 校验 master 节点加入集群是否成功
      assert:
        that: master_join_rslt is succeeded
        msg: "节点：{{ inventory_hostname }} kubeadm join 失败"

    - include_tasks: common/check_master_status.yml
    when:
      - 'get_nodes_result.stdout != "1"'
      - inventory_hostname != groups['kube_masters'] | difference(groups['delete_masters']) | unique | first

  - name: 更新证书 10 年有效期
    shell: >
      /usr/local/bin/update-kubeadm-cert.sh all
    environment:
      ENABLE_INIT: true
  when: "inventory_hostname in (groups['kube_masters'] | difference(groups['delete_masters']))"
