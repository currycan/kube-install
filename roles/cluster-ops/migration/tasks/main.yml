- block:
  - name: 确认 etcd 已停止运行
    service:
      name: etcd
      state: stopped
      enabled: yes

  - name: 读取本地 etcd 备份文件
    find:
      paths: "{{ etcd_data_bak_dir  }}"
      patterns: "*.db"
    register: etcd_back_dirs
    delegate_to: localhost

  - name: 校验 etcd 备份文件是否存在
    assert:
      that: etcd_back_dirs.files|length >= 1
      msg: "未获取到节点：{{ inventory_hostname }} 的任何备份文件，请检查目录：{{ etcd_data_bak_dir  }} 中是否有该节点备份文件。"

  - name: 获取最新 etcd 备份文件
    set_fact:
      etcd_latest_back_dir: "{{ etcd_back_dirs.files | sort(attribute='ctime',reverse=true) | first }}"

  - name: 清理相关目录
    file:
      name: "{{ item }}"
      state: absent
    with_items:
    - "{{ etcd_data_dir }}"
    - "{{ etcd_wal_dir }}"

  - name: 创建 etcd 迁移相关目录
    file:
      name: "{{ kubernetes_etc_dir }}/backup-etcd/"
      state: directory
      mode: 0644

  - name: 分发备份文件到各节点
    copy:
      src: "{{ etcd_latest_back_dir.path }}"
      dest: "{{ kubernetes_etc_dir }}/backup-etcd/etcd-snapshot-latest.db"
      mode: 0644

  - name: 恢复 etcd 数据
    command: >
      etcdctl snapshot restore \
      {{ kubernetes_etc_dir }}/backup-etcd/etcd-snapshot-latest.db \
      --data-dir={{ etcd_data_dir }} \
      --name={{ hostvars[inventory_hostname].ansible_hostname | lower }} \
      --initial-cluster={% for host in (groups['kube_etcds'] | difference(groups['delete_etcds']) | unique) %}{{ hostvars[host].ansible_hostname | lower }}=https://{{ hostvars[host]['ansible_' + iface].ipv4.address }}:2380{% if not loop.last %},{% endif %}{% endfor %} \
      --initial-cluster-token=etcd-cluster-token \
      --initial-advertise-peer-urls=https://{{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }}:2380

  - name: 启动 etcd
    systemd:
      name: etcd
      daemon_reload: yes
      state: restarted
      enabled: yes
    register: started_etcd
    until: started_etcd.status.ActiveState == "active"
    retries: 3
    delay: "{{ retry_stagger }}"

  - name: 检查 etcd 状态
    uri:
      method: "GET"
      url: "https://{{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }}:2379/health"
      validate_certs: no
      client_cert: "{{ etcd_cert_healthcheck_client }}"
      client_key: "{{ etcd_cert_healthcheck_client_key }}"
    register: result
    until: result.status is defined and result.status == 200
    retries: 3
    delay: "{{ retry_stagger }}"

  - name: 移除各节点临时 etcd 备份文件
    file:
      name: "{{ kubernetes_etc_dir }}/backup-etcd/etcd-snapshot-latest.db"
      state: absent
  when: inventory_hostname in (groups['kube_etcds'] | difference(groups['delete_etcds']) | unique)
