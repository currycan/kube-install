- name: rpm 安装 containerd
  when: install_way != 'binary'
  shell: >-
    rpm -Uvh --nodeps --force {{ cache_dir }}/containerd/*.rpm

- name: 二进制安装 containerd、cni 和 crictl
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - { src: "{{ cache_dir }}/binary/containerd/", dest: "/"}
    - { src: "{{ cache_dir }}/binary/crictl/", dest: "/usr/local/bin/"}

- name: crictl 命令自动补全
  shell: >
    crictl completion bash > /etc/bash_completion.d/crictl;
    source /etc/bash_completion.d/crictl
  args:
    executable: /bin/bash

- name: 创建 containerd 配置文件目录
  file:
    path: "{{ item }}"
    state: directory
    mode: 0644
  with_items:
    - "{{ containerd_etc_dir }}"
    - "{{ cni_etc_dir }}"

- name: 配置 containerd
  when: item.enable | bool
  template:
    src: "{{ inventory_dir }}/roles/container-runtime/templates/containerd/{{ item.src }}.j2"
    dest: "{{ item.dest }}"
    owner: "root"
    group: "root"
    mode: "0644"
  with_items:
    - { src: "containerd.service", dest: "{{ systemd_service_dir }}/containerd.service", enable: true  }
    - { src: "crictl.yaml", dest: "/etc/crictl.yaml", enable: true }
    - { src: "config.toml", dest: "{{ containerd_etc_dir }}/config.toml", enable: "{%- if container_runtime=='containerd' -%}true{% else %}false{%- endif -%}" }

- name: 启动 containerd，并设置开机启动
  systemd:
    name: containerd
    daemon_reload: yes
    state: restarted
    enabled: yes
  register: started_containerd
  until: started_containerd is succeeded
  retries: 3
  delay: "{{ retry_stagger }}"

- name: 以轮询的方式等待 containerd 启动完成
  when: started_containerd is succeeded
  shell: "systemctl status containerd.service | grep Active"
  register: containerd_status
  until: '"running" in containerd_status.stdout'
  retries: 2
  delay: "{{ retry_stagger }}"

# - name: 获取其他 cni 配置文件
#   find:
#     paths: "{{ cni_etc_dir }}"
#     patterns: "*.conflist,*.conf"
#     # use_regex: true
#   register: find_files_to_delete

# - name: 删除其他 cni 配置文件
#   file:
#     path: "{{ item.path }}"
#     state: absent
#   with_items: "{{ find_files_to_delete.files }}"
