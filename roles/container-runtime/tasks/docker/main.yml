- name: 创建 docker 用户组
  group:
    name: docker
    state: present

- name: 创建 docker 用户
  user:
    name: docker
    comment: "Docker user"
    shell: /sbin/nologin
    state: present
    system: yes
    groups: docker

- name: 创建 docker 配置文件目录
  file:
    path: "{{ docker_etc_dir }}"
    state: directory
    mode: 0644

- name: 二进制安装 docker
  when: install_way == 'binary'
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - { src: "{{ cache_dir }}/binary/docker/", dest: "/usr/local/bin/"}

- name: rpm 安装 docker
  when: install_way != 'binary'
  shell: >-
    rpm -Uvh --nodeps --force {{ cache_dir }}/docker/*.rpm

- name: 安装 docker 命令补全工具、 docker orphan 清理工具、docker-tag 工具
  copy:
    src: "{{ inventory_dir }}/roles/container-runtime/files/{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - { src: "docker-compose", dest: "/etc/bash_completion.d/", mode: "0644" }
    - { src: "docker", dest: "/etc/bash_completion.d/", mode: "0644" }
    - { src: "cleanup-docker-orphans.sh", dest: "/usr/local/bin/cleanup-docker-orphans", mode: "0755" }
    - { src: "docker-tag", dest: "/usr/local/bin", mode: "0755" }
    - { src: "limit-docker.slice", dest: "{{ systemd_service_dir }}", mode: "0644" }

- name: 配置 Docker engine
  template:
    src: "{{ inventory_dir }}/roles/container-runtime/templates/docker/{{ item.src }}.j2"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: "docker.service", dest: "{{ systemd_service_dir }}/docker.service" }
    - { src: "docker.socket", dest: "{{ systemd_service_dir }}/docker.socket" }
    - { src: "daemon.json", dest: "{{ docker_etc_dir }}/daemon.json" }

- name: docker 命令自动补全
  shell: >
    source /etc/bash_completion.d/docker
  args:
    executable: /bin/bash

- name: flush-iptables
  shell: >
    iptables -P INPUT ACCEPT;
    iptables -F && iptables -X;
    iptables -F -t nat && iptables -X -t nat;
    iptables -F -t raw && iptables -X -t raw;
    iptables -F -t mangle && iptables -X -t mangle;
    iptables -P FORWARD ACCEPT

- name: 启动 Docker socket
  systemd:
    name: docker.socket
    daemon_reload: yes
    state: started
    enabled: yes

- name: 启动 Docker engine，并设置开机启动
  systemd:
    name: docker
    daemon_reload: yes
    state: restarted
    enabled: yes
  register: started_docker
  until: started_docker is succeeded
  retries: 3
  delay: "{{ retry_stagger }}"

- name: 以轮询的方式等待 docker 启动完成
  when: started_docker is succeeded
  shell: "systemctl status docker.service | grep Active"
  register: docker_status
  until: '"running" in docker_status.stdout'
  retries: 2
  delay: "{{ retry_stagger }}"

# 非 root 用户添加 docker 执行权限
- name: 判断执行用户是否存在
  action: shell /usr/bin/getent passwd {{ item }} | grep {{ item }} | cut -d":" -f6
  register: user_results
  with_items:
  - "{{ normal_user }}"

- name: 添加非 root 用户 docker 命令权限
  when: 'item.stdout | length > 0'
  shell: >
    usermod -aG docker {{ item.item }}
  with_items:
  - "{{ user_results['results'] }}"
