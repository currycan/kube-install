- name: 离线安装 kubectl
  when: install_way != 'binary'
  yum:
    name: "{{ cache_dir }}/kubernetes/*kubectl*.rpm"
    state: present

- name: 二进制安装 kubectl
  when: install_way == 'binary'
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - { src: "{{ cache_dir }}/binary/kubernetes/kubectl", dest: "/usr/bin/"}

- name: 生成 bootstrap token
  include_tasks: common/gen_bootstrap_token.yml

- block:
  - name: 获取 bootstrap_token
    shell: >
      cat "{{ k8s_pki_dir }}/token.csv" | grep kubelet-bootstrap | cut -d',' -f1
    register: get_bootstrap_token

  - name: 设置 bootstrap_token 变量
    set_fact:
      bootstrap_token: "{{ get_bootstrap_token.stdout }}"
  delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_etcds']) | difference(groups['delete_masters']) | unique | first }}"

- block:
  - name: 判断集群依赖 kubeconfig 文件是否存在
    stat:
      path: "{{ item.path }}"
    with_items: "{{ kube_config.contexts }}"
    register: check_kubeconfig_files

  - name: 创建集群依赖 kubeconfig 文件
    when: not item.stat.exists
    include_tasks: "_create.yml"
    with_items: "{{ check_kubeconfig_files['results'] }}"
  run_once: true
  delegate_to: "{{ groups['kube_masters'] | difference(groups['delete_etcds']) | difference(groups['delete_masters']) | unique | first }}"
