- name: 判断证书私钥是否存在
  stat:
    path: "{{ item.dir }}/{{ item.name }}-key.pem"
  with_items:
    - "{{ certs }}"
  register: check_cert_key_files

- block:
  - name: 获取 kubernetes CA 证书
    slurp:
      src: "{{ item }}"
    with_items:
      - "{{ kubernetes_ca }}"
      - "{{ kubernetes_ca_key }}"
    register: slurp_kubernetes_ca_certs
    run_once: true
    delegate_to: "{{ groups['kube_masters'][0] }}"

  - name: 分发 kubernetes CA 证书到各节点
    when: inventory_hostname != groups['kube_masters'][0]
    copy:
      dest: "{{ item.source }}"
      content: "{{ item.content | b64decode }}"
      owner: root
      group: root
      mode: 0644
    no_log: true
    with_items: "{{ slurp_kubernetes_ca_certs.results }}"
  when:
    - check_cert_key_files['results'][0].item.org is defined
    - check_cert_key_files['results'][0].item.org == "system:nodes"

- name: 渲染 ca-config.json 证书配置文件
  template:
    src: "{{ inventory_dir }}/roles/certificates/templates/cfssl/{{ item.src }}.j2"
    dest: "{{ item.dest }}"
    owner: root
    mode: 0644
  with_items:
    - { src: "ca-config.json", dest: "{{ cfssl_ca_config }}" }

- include_tasks: "_certs.yml"
  loop_control:
    loop_var: out_item
  with_items: "{{ check_cert_key_files['results'] }}"

- name: worker 节点删除 kubernetes CA 私钥
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ kubernetes_ca_key }}"
  when:
    - inventory_hostname in (groups['kube_nodes'] | difference(groups['delete_nodes']))
    - check_cert_key_files['results'][0].item.org is defined
    - check_cert_key_files['results'][0].item.org == "system:nodes"

- name: 获取待删除的证书临时文件
  find:
    paths: "{{ item }}"
    patterns: "*.csr,*.json"
    # use_regex: true
  with_items:
    - "{{ k8s_pki_dir }}"
    - "{{ etcd_pki_dir }}"
  register: find_files_to_delete

- name: 删除证书签名请求文件
  include_tasks: "_delete_files.yml"
  no_log: true
  loop_control:
    loop_var: out_item
  with_items: "{{ find_files_to_delete['results'] }}"
